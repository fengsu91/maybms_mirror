.\\" auto-generated by docbook2man-spec $Revision: 1.1.1.1 $
.TH "POSTMASTER" "1" "2008-06-08" "Application" "PostgreSQL Server Applications"
.SH NAME
postmaster \- PostgreSQL database server

.SH SYNOPSIS
.sp
\fBpostmaster\fR [ \fB\fIoption\fB\fR\fI...\fR ] 
.SH "DESCRIPTION"
.PP
\fBpostmaster\fR is a deprecated alias of \fBpostgres\fR.
.SH "SEE ALSO"
.PP
\fBpostgres\fR(1)
.SH NAME
dblink_connect \- opens a persistent connection to a remote database
.SH SYNOPSIS
.sp
.nf
    dblink_connect(text connstr) returns text
    dblink_connect(text connname, text connstr) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_connect()\fR establishes a connection to a remote
PostgreSQL database. The server and database to
be contacted are identified through a standard \fBlibpq\fR
connection string. Optionally, a name can be assigned to the
connection. Multiple named connections can be open at once, but
only one unnamed connection is permitted at a time. The connection
will persist until closed or until the database session is ended.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
The name to use for this connection; if omitted, an unnamed
connection is opened, replacing any existing unnamed connection.
.TP
\fB\fIconnstr\fB\fR
\fBlibpq\fR-style connection info string, for example
hostaddr=127.0.0.1 port=5432 dbname=mydb user=postgres
password=mypasswd.
For details see \fBPQconnectdb\fR in
in the documentation.
.SH "RETURN VALUE"
.PP
Returns status, which is always OK (since any error
causes the function to throw an error instead of returning).
.SH "NOTES"
.PP
Only superusers may use \fBdblink_connect\fR to create
non-password-authenticated connections. If non-superusers need this
capability, use \fBdblink_connect_u\fR instead.
.PP
It is unwise to choose connection names that contain equal signs,
as this opens a risk of confusion with connection info strings
in other \fIdblink\fR functions.
.SH "EXAMPLE"
.sp
.nf
 select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 select dblink_connect('myconn', 'dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)
   
.sp
.fi
.SH NAME
dblink_connect_u \- opens a persistent connection to a remote database, insecurely
.SH SYNOPSIS
.sp
.nf
    dblink_connect_u(text connstr) returns text
    dblink_connect_u(text connname, text connstr) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_connect_u()\fR is identical to
\fBdblink_connect()\fR, except that it will allow non-superusers
to connect using any authentication method.
.PP
If the remote server selects an authentication method that does not
involve a password, then impersonation and subsequent escalation of
privileges can occur, because the session will appear to have
originated from the user as which the local PostgreSQL
server runs. Therefore, \fBdblink_connect_u()\fR is initially
installed with all privileges revoked from PUBLIC,
making it un-callable except by superusers. In some situations
it may be appropriate to grant EXECUTE permission for
\fBdblink_connect_u()\fR to specific users who are considered
trustworthy, but this should be done with care.
.PP
For further details see \fBdblink_connect()\fR.
.SH NAME
dblink_disconnect \- closes a persistent connection to a remote database
.SH SYNOPSIS
.sp
.nf
    dblink_disconnect() returns text
    dblink_disconnect(text connname) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_disconnect()\fR closes a connection previously opened
by \fBdblink_connect()\fR. The form with no arguments closes
an unnamed connection.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
The name of a named connection to be closed.
.SH "RETURN VALUE"
.PP
Returns status, which is always OK (since any error
causes the function to throw an error instead of returning).
.SH "EXAMPLE"
.sp
.nf
 test=# select dblink_disconnect();
  dblink_disconnect
 -------------------
  OK
 (1 row)

 select dblink_disconnect('myconn');
  dblink_disconnect
 -------------------
  OK
 (1 row)
   
.sp
.fi
.SH NAME
dblink \- executes a query in a remote database
.SH SYNOPSIS
.sp
.nf
    dblink(text connname, text sql [, bool fail_on_error]) returns setof record
    dblink(text connstr, text sql [, bool fail_on_error]) returns setof record
    dblink(text sql [, bool fail_on_error]) returns setof record
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink\fR executes a query (usually a \fBSELECT\fR,
but it can be any SQL statement that returns rows) in a remote database.
.PP
When two \fBtext\fR arguments are given, the first one is first
looked up as a persistent connection's name; if found, the command
is executed on that connection. If not found, the first argument
is treated as a connection info string as for \fBdblink_connect\fR,
and the indicated connection is made just for the duration of this command.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use; omit this parameter to use the
unnamed connection.
.TP
\fB\fIconnstr\fB\fR
A connection info string, as previously described for
\fBdblink_connect\fR.
.TP
\fB\fIsql\fB\fR
The SQL query that you wish to execute in the remote database,
for example select * from foo.
.TP
\fB\fIfail_on_error\fB\fR
If true (the default when omitted) then an error thrown on the
remote side of the connection causes an error to also be thrown
locally. If false, the remote error is locally reported as a NOTICE,
and the function returns no rows.
.SH "RETURN VALUE"
.PP
The function returns the row(s) produced by the query. Since
\fBdblink\fR can be used with any query, it is declared
to return \fBrecord\fR, rather than specifying any particular
set of columns. This means that you must specify the expected
set of columns in the calling query \(em otherwise
PostgreSQL would not know what to expect.
Here is an example:
.sp
.nf
SELECT *
    FROM dblink('dbname=mydb', 'select proname, prosrc from pg_proc')
      AS t1(proname name, prosrc text)
    WHERE proname LIKE 'bytea%';
.sp
.fi
The ``alias'' part of the FROM clause must
specify the column names and types that the function will return.
(Specifying column names in an alias is actually standard SQL
syntax, but specifying column types is a PostgreSQL
extension.) This allows the system to understand what
* should expand to, and what \fBproname\fR
in the WHERE clause refers to, in advance of trying
to execute the function. At runtime, an error will be thrown
if the actual query result from the remote database does not
have the same number of columns shown in the FROM clause.
The column names need not match, however, and \fBdblink\fR
does not insist on exact type matches either. It will succeed
so long as the returned data strings are valid input for the
column type declared in the FROM clause.
.SH "NOTES"
.PP
\fBdblink\fR fetches the entire remote query result before
returning any of it to the local system. If the query is expected
to return a large number of rows, it's better to open it as a cursor
with \fBdblink_open\fR and then fetch a manageable number
of rows at a time.
.PP
A convenient way to use \fBdblink\fR with predetermined
queries is to create a view.
This allows the column type information to be buried in the view,
instead of having to spell it out in every query. For example,
.sp
.nf
    create view myremote_pg_proc as
      select *
        from dblink('dbname=postgres', 'select proname, prosrc from pg_proc')
        as t1(proname name, prosrc text);

    select * from myremote_pg_proc where proname like 'bytea%';
    
.sp
.fi
.SH "EXAMPLE"
.sp
.nf
 select * from dblink('dbname=postgres', 'select proname, prosrc from pg_proc')
  as t1(proname name, prosrc text) where proname like 'bytea%';
   proname   |   prosrc
 ------------+------------
  byteacat   | byteacat
  byteaeq    | byteaeq
  bytealt    | bytealt
  byteale    | byteale
  byteagt    | byteagt
  byteage    | byteage
  byteane    | byteane
  byteacmp   | byteacmp
  bytealike  | bytealike
  byteanlike | byteanlike
  byteain    | byteain
  byteaout   | byteaout
 (12 rows)

 select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 select * from dblink('select proname, prosrc from pg_proc')
  as t1(proname name, prosrc text) where proname like 'bytea%';
   proname   |   prosrc
 ------------+------------
  byteacat   | byteacat
  byteaeq    | byteaeq
  bytealt    | bytealt
  byteale    | byteale
  byteagt    | byteagt
  byteage    | byteage
  byteane    | byteane
  byteacmp   | byteacmp
  bytealike  | bytealike
  byteanlike | byteanlike
  byteain    | byteain
  byteaout   | byteaout
 (12 rows)

 select dblink_connect('myconn', 'dbname=regression');
  dblink_connect
 ----------------
  OK
 (1 row)

 select * from dblink('myconn', 'select proname, prosrc from pg_proc')
  as t1(proname name, prosrc text) where proname like 'bytea%';
   proname   |   prosrc
 ------------+------------
  bytearecv  | bytearecv
  byteasend  | byteasend
  byteale    | byteale
  byteagt    | byteagt
  byteage    | byteage
  byteane    | byteane
  byteacmp   | byteacmp
  bytealike  | bytealike
  byteanlike | byteanlike
  byteacat   | byteacat
  byteaeq    | byteaeq
  bytealt    | bytealt
  byteain    | byteain
  byteaout   | byteaout
 (14 rows)
   
.sp
.fi
.SH NAME
dblink_exec \- executes a command in a remote database
.SH SYNOPSIS
.sp
.nf
    dblink_exec(text connname, text sql [, bool fail_on_error]) returns text
    dblink_exec(text connstr, text sql [, bool fail_on_error]) returns text
    dblink_exec(text sql [, bool fail_on_error]) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_exec\fR executes a command (that is, any SQL statement
that doesn't return rows) in a remote database.
.PP
When two \fBtext\fR arguments are given, the first one is first
looked up as a persistent connection's name; if found, the command
is executed on that connection. If not found, the first argument
is treated as a connection info string as for \fBdblink_connect\fR,
and the indicated connection is made just for the duration of this command.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use; omit this parameter to use the
unnamed connection.
.TP
\fB\fIconnstr\fB\fR
A connection info string, as previously described for
\fBdblink_connect\fR.
.TP
\fB\fIsql\fB\fR
The SQL command that you wish to execute in the remote database,
for example
insert into foo values(0,'a','{"a0","b0","c0"}').
.TP
\fB\fIfail_on_error\fB\fR
If true (the default when omitted) then an error thrown on the
remote side of the connection causes an error to also be thrown
locally. If false, the remote error is locally reported as a NOTICE,
and the function's return value is set to ERROR.
.SH "RETURN VALUE"
.PP
Returns status, either the command's status string or ERROR.
.SH "EXAMPLE"
.sp
.nf
 select dblink_connect('dbname=dblink_test_slave');
  dblink_connect
 ----------------
  OK
 (1 row)

 select dblink_exec('insert into foo values(21,''z'',''{"a0","b0","c0"}'');');
    dblink_exec
 -----------------
  INSERT 943366 1
 (1 row)

 select dblink_connect('myconn', 'dbname=regression');
  dblink_connect
 ----------------
  OK
 (1 row)

 select dblink_exec('myconn', 'insert into foo values(21,''z'',''{"a0","b0","c0"}'');');
    dblink_exec
 ------------------
  INSERT 6432584 1
 (1 row)

 select dblink_exec('myconn', 'insert into pg_class values (''foo'')',false);
 NOTICE:  sql error
 DETAIL:  ERROR:  null value in column "relnamespace" violates not-null constraint

  dblink_exec
 -------------
  ERROR
 (1 row)
   
.sp
.fi
.SH NAME
dblink_open \- opens a cursor in a remote database
.SH SYNOPSIS
.sp
.nf
    dblink_open(text cursorname, text sql [, bool fail_on_error]) returns text
    dblink_open(text connname, text cursorname, text sql [, bool fail_on_error]) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_open()\fR opens a cursor in a remote database.
The cursor can subsequently be manipulated with
\fBdblink_fetch()\fR and \fBdblink_close()\fR.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use; omit this parameter to use the
unnamed connection.
.TP
\fB\fIcursorname\fB\fR
The name to assign to this cursor.
.TP
\fB\fIsql\fB\fR
The \fBSELECT\fR statement that you wish to execute in the remote
database, for example select * from pg_class.
.TP
\fB\fIfail_on_error\fB\fR
If true (the default when omitted) then an error thrown on the
remote side of the connection causes an error to also be thrown
locally. If false, the remote error is locally reported as a NOTICE,
and the function's return value is set to ERROR.
.SH "RETURN VALUE"
.PP
Returns status, either OK or ERROR.
.SH "NOTES"
.PP
Since a cursor can only persist within a transaction,
\fBdblink_open\fR starts an explicit transaction block
(\fBBEGIN\fR) on the remote side, if the remote side was
not already within a transaction. This transaction will be
closed again when the matching \fBdblink_close\fR is
executed. Note that if
you use \fBdblink_exec\fR to change data between
\fBdblink_open\fR and \fBdblink_close\fR,
and then an error occurs or you use \fBdblink_disconnect\fR before
\fBdblink_close\fR, your change \fBwill be
lost\fR because the transaction will be aborted.
.SH "EXAMPLE"
.sp
.nf
 test=# select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 test=# select dblink_open('foo', 'select proname, prosrc from pg_proc');
  dblink_open
 -------------
  OK
 (1 row)
   
.sp
.fi
.SH NAME
dblink_fetch \- returns rows from an open cursor in a remote database
.SH SYNOPSIS
.sp
.nf
    dblink_fetch(text cursorname, int howmany [, bool fail_on_error]) returns setof record
    dblink_fetch(text connname, text cursorname, int howmany [, bool fail_on_error]) returns setof record
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_fetch\fR fetches rows from a cursor previously
established by \fBdblink_open\fR.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use; omit this parameter to use the
unnamed connection.
.TP
\fB\fIcursorname\fB\fR
The name of the cursor to fetch from.
.TP
\fB\fIhowmany\fB\fR
The maximum number of rows to retrieve. The next \fIhowmany\fR
rows are fetched, starting at the current cursor position, moving
forward. Once the cursor has reached its end, no more rows are produced.
.TP
\fB\fIfail_on_error\fB\fR
If true (the default when omitted) then an error thrown on the
remote side of the connection causes an error to also be thrown
locally. If false, the remote error is locally reported as a NOTICE,
and the function returns no rows.
.SH "RETURN VALUE"
.PP
The function returns the row(s) fetched from the cursor. To use this
function, you will need to specify the expected set of columns,
as previously discussed for \fBdblink\fR.
.SH "NOTES"
.PP
On a mismatch between the number of return columns specified in the
FROM clause, and the actual number of columns returned by the
remote cursor, an error will be thrown. In this event, the remote cursor
is still advanced by as many rows as it would have been if the error had
not occurred. The same is true for any other error occurring in the local
query after the remote \fBFETCH\fR has been done.
.SH "EXAMPLE"
.sp
.nf
 test=# select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 test=# select dblink_open('foo', 'select proname, prosrc from pg_proc where proname like ''bytea%''');
  dblink_open
 -------------
  OK
 (1 row)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
  funcname |  source
 ----------+----------
  byteacat | byteacat
  byteacmp | byteacmp
  byteaeq  | byteaeq
  byteage  | byteage
  byteagt  | byteagt
 (5 rows)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
  funcname  |  source
 -----------+-----------
  byteain   | byteain
  byteale   | byteale
  bytealike | bytealike
  bytealt   | bytealt
  byteane   | byteane
 (5 rows)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
   funcname  |   source
 ------------+------------
  byteanlike | byteanlike
  byteaout   | byteaout
 (2 rows)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
  funcname | source
 ----------+--------
 (0 rows)
   
.sp
.fi
.SH NAME
dblink_close \- closes a cursor in a remote database
.SH SYNOPSIS
.sp
.nf
    dblink_close(text cursorname [, bool fail_on_error]) returns text
    dblink_close(text connname, text cursorname [, bool fail_on_error]) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_close\fR closes a cursor previously opened with
\fBdblink_open\fR.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use; omit this parameter to use the
unnamed connection.
.TP
\fB\fIcursorname\fB\fR
The name of the cursor to close.
.TP
\fB\fIfail_on_error\fB\fR
If true (the default when omitted) then an error thrown on the
remote side of the connection causes an error to also be thrown
locally. If false, the remote error is locally reported as a NOTICE,
and the function's return value is set to ERROR.
.SH "RETURN VALUE"
.PP
Returns status, either OK or ERROR.
.SH "NOTES"
.PP
If \fBdblink_open\fR started an explicit transaction block,
and this is the last remaining open cursor in this connection,
\fBdblink_close\fR will issue the matching \fBCOMMIT\fR.
.SH "EXAMPLE"
.sp
.nf
 test=# select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 test=# select dblink_open('foo', 'select proname, prosrc from pg_proc');
  dblink_open
 -------------
  OK
 (1 row)

 test=# select dblink_close('foo');
  dblink_close
 --------------
  OK
 (1 row)
   
.sp
.fi
.SH NAME
dblink_get_connections \- returns the names of all open named dblink connections
.SH SYNOPSIS
.sp
.nf
    dblink_get_connections() returns text[]
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_get_connections\fR returns an array of the names
of all open named \fIdblink\fR connections.
.SH "RETURN VALUE"
.PP
Returns a text array of connection names, or NULL if none.
.SH "EXAMPLE"
.sp
.nf
   SELECT dblink_get_connections();
   
.sp
.fi
.SH NAME
dblink_error_message \- gets last error message on the named connection
.SH SYNOPSIS
.sp
.nf
    dblink_error_message(text connname) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_error_message\fR fetches the most recent remote
error message for a given connection.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use.
.SH "RETURN VALUE"
.PP
Returns last error message, or an empty string if there has been
no error in this connection.
.SH "EXAMPLE"
.sp
.nf
    SELECT dblink_error_message('dtest1');
   
.sp
.fi
.SH NAME
dblink_send_query \- sends an async query to a remote database
.SH SYNOPSIS
.sp
.nf
    dblink_send_query(text connname, text sql) returns int
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_send_query\fR sends a query to be executed
asynchronously, that is, without immediately waiting for the result.
There must not be an async query already in progress on the
connection.
.PP
After successfully dispatching an async query, completion status
can be checked with \fBdblink_is_busy\fR, and the results
are ultimately collected with \fBdblink_get_result\fR.
It is also possible to attempt to cancel an active async query
using \fBdblink_cancel_query\fR.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use.
.TP
\fB\fIsql\fB\fR
The SQL statement that you wish to execute in the remote database,
for example select * from pg_class.
.SH "RETURN VALUE"
.PP
Returns 1 if the query was successfully dispatched, 0 otherwise.
.SH "EXAMPLE"
.sp
.nf
    SELECT dblink_send_query('dtest1', 'SELECT * FROM foo WHERE f1 < 3');
   
.sp
.fi
.SH NAME
dblink_is_busy \- checks if connection is busy with an async query
.SH SYNOPSIS
.sp
.nf
    dblink_is_busy(text connname) returns int
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_is_busy\fR tests whether an async query is in progress.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to check.
.SH "RETURN VALUE"
.PP
Returns 1 if connection is busy, 0 if it is not busy.
If this function returns 0, it is guaranteed that
\fBdblink_get_result\fR will not block.
.SH "EXAMPLE"
.sp
.nf
    SELECT dblink_is_busy('dtest1');
   
.sp
.fi
.SH NAME
dblink_get_result \- gets an async query result
.SH SYNOPSIS
.sp
.nf
    dblink_get_result(text connname [, bool fail_on_error]) returns setof record
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_get_result\fR collects the results of an
asynchronous query previously sent with \fBdblink_send_query\fR.
If the query is not already completed, \fBdblink_get_result\fR
will wait until it is.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use.
.TP
\fB\fIfail_on_error\fB\fR
If true (the default when omitted) then an error thrown on the
remote side of the connection causes an error to also be thrown
locally. If false, the remote error is locally reported as a NOTICE,
and the function returns no rows.
.SH "RETURN VALUE"
.PP
For an async query (that is, a SQL statement returning rows),
the function returns the row(s) produced by the query. To use this
function, you will need to specify the expected set of columns,
as previously discussed for \fBdblink\fR.
.PP
For an async command (that is, a SQL statement not returning rows),
the function returns a single row with a single text column containing
the command's status string. It is still necessary to specify that
the result will have a single text column in the calling FROM
clause.
.SH "NOTES"
.PP
This function \fBmust\fR be called if
\fBdblink_send_query\fR returned 1.
It must be called once for each query
sent, and one additional time to obtain an empty set result,
before the connection can be used again.
.SH "EXAMPLE"
.sp
.nf
 contrib_regression=#   SELECT dblink_connect('dtest1', 'dbname=contrib_regression');
  dblink_connect
 ----------------
  OK
 (1 row)

 contrib_regression=#   SELECT * from
 contrib_regression-#    dblink_send_query('dtest1', 'select * from foo where f1 < 3') as t1;
  t1
 ----
   1
 (1 row)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 |     f3
 ----+----+------------
   0 | a  | {a0,b0,c0}
   1 | b  | {a1,b1,c1}
   2 | c  | {a2,b2,c2}
 (3 rows)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 | f3
 ----+----+----
 (0 rows)

 contrib_regression=#   SELECT * from
    dblink_send_query('dtest1', 'select * from foo where f1 < 3; select * from foo where f1 > 6') as t1;
  t1
 ----
   1
 (1 row)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 |     f3
 ----+----+------------
   0 | a  | {a0,b0,c0}
   1 | b  | {a1,b1,c1}
   2 | c  | {a2,b2,c2}
 (3 rows)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 |      f3
 ----+----+---------------
   7 | h  | {a7,b7,c7}
   8 | i  | {a8,b8,c8}
   9 | j  | {a9,b9,c9}
  10 | k  | {a10,b10,c10}
 (4 rows)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 | f3
 ----+----+----
 (0 rows)
   
.sp
.fi
.SH NAME
dblink_cancel_query \- cancels any active query on the named connection
.SH SYNOPSIS
.sp
.nf
    dblink_cancel_query(text connname) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_cancel_query\fR attempts to cancel any query that
is in progress on the named connection. Note that this is not
certain to succeed (since, for example, the remote query might
already have finished). A cancel request simply improves the
odds that the query will fail soon. You must still complete the
normal query protocol, for example by calling
\fBdblink_get_result\fR.
.SH "ARGUMENTS"
.TP
\fB\fIconname\fB\fR
Name of the connection to use.
.SH "RETURN VALUE"
.PP
Returns OK if the cancel request has been sent, or
the text of an error message on failure.
.SH "EXAMPLE"
.sp
.nf
    SELECT dblink_cancel_query('dtest1');
   
.sp
.fi
.SH NAME
dblink_current_query \- returns the current query string
.SH SYNOPSIS
.sp
.nf
    dblink_current_query() returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
Returns the currently executing interactive command string of the
local database session, or NULL if it can't be determined. Note
that this function is not really related to \fIdblink\fR's
other functionality. It is provided since it is sometimes useful
in generating queries to be forwarded to remote databases.
.SH "RETURN VALUE"
.PP
Returns a copy of the currently executing query string.
.SH "EXAMPLE"
.sp
.nf
test=# select dblink_current_query();
      dblink_current_query
--------------------------------
 select dblink_current_query();
(1 row)
   
.sp
.fi
.SH NAME
dblink_get_pkey \- returns the positions and field names of a relation's    primary key fields
.SH SYNOPSIS
.sp
.nf
    dblink_get_pkey(text relname) returns setof dblink_pkey_results
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_get_pkey\fR provides information about the primary
key of a relation in the local database. This is sometimes useful
in generating queries to be sent to remote databases.
.SH "ARGUMENTS"
.TP
\fB\fIrelname\fB\fR
Name of a local relation, for example foo or
myschema.mytab. Include double quotes if the
name is mixed-case or contains special characters, for
example "FooBar"; without quotes, the string
will be folded to lower case.
.SH "RETURN VALUE"
.PP
Returns one row for each primary key field, or no rows if the relation
has no primary key. The result rowtype is defined as
.sp
.nf
CREATE TYPE dblink_pkey_results AS (position int, colname text);
    
.sp
.fi
.SH "EXAMPLE"
.sp
.nf
test=# create table foobar(f1 int, f2 int, f3 int,
test(#   primary key(f1,f2,f3));
CREATE TABLE
test=# select * from dblink_get_pkey('foobar');
 position | colname
----------+---------
        1 | f1
        2 | f2
        3 | f3
(3 rows)
   
.sp
.fi
.SH NAME
dblink_build_sql_insert \- builds an INSERT statement using a local tuple, replacing the    primary key field values with alternative supplied values
.SH SYNOPSIS
.sp
.nf
    dblink_build_sql_insert(text relname,
                            int2vector primary_key_attnums,
                            int2 num_primary_key_atts,
                            text[] src_pk_att_vals_array,
                            text[] tgt_pk_att_vals_array) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_build_sql_insert\fR can be useful in doing selective
replication of a local table to a remote database. It selects a row
from the local table based on primary key, and then builds a SQL
\fBINSERT\fR command that will duplicate that row, but with
the primary key values replaced by the values in the last argument.
(To make an exact copy of the row, just specify the same values for
the last two arguments.)
.SH "ARGUMENTS"
.TP
\fB\fIrelname\fB\fR
Name of a local relation, for example foo or
myschema.mytab. Include double quotes if the
name is mixed-case or contains special characters, for
example "FooBar"; without quotes, the string
will be folded to lower case.
.TP
\fB\fIprimary_key_attnums\fB\fR
Attribute numbers (1-based) of the primary key fields,
for example 1 2.
.TP
\fB\fInum_primary_key_atts\fB\fR
The number of primary key fields.
.TP
\fB\fIsrc_pk_att_vals_array\fB\fR
Values of the primary key fields to be used to look up the
local tuple. Each field is represented in text form.
An error is thrown if there is no local row with these
primary key values.
.TP
\fB\fItgt_pk_att_vals_array\fB\fR
Values of the primary key fields to be placed in the resulting
\fBINSERT\fR command. Each field is represented in text form.
.SH "RETURN VALUE"
.PP
Returns the requested SQL statement as text.
.SH "EXAMPLE"
.sp
.nf
 test=# select dblink_build_sql_insert('foo', '1 2', 2, '{"1", "a"}', '{"1", "b''a"}');
              dblink_build_sql_insert
 --------------------------------------------------
  INSERT INTO foo(f1,f2,f3) VALUES('1','b''a','1')
 (1 row)
   
.sp
.fi
.SH NAME
dblink_build_sql_delete \- builds a DELETE statement using supplied values for primary    key field values
.SH SYNOPSIS
.sp
.nf
    dblink_build_sql_delete(text relname,
                            int2vector primary_key_attnums,
                            int2 num_primary_key_atts,
                            text[] tgt_pk_att_vals_array) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_build_sql_delete\fR can be useful in doing selective
replication of a local table to a remote database. It builds a SQL
\fBDELETE\fR command that will delete the row with the given
primary key values.
.SH "ARGUMENTS"
.TP
\fB\fIrelname\fB\fR
Name of a local relation, for example foo or
myschema.mytab. Include double quotes if the
name is mixed-case or contains special characters, for
example "FooBar"; without quotes, the string
will be folded to lower case.
.TP
\fB\fIprimary_key_attnums\fB\fR
Attribute numbers (1-based) of the primary key fields,
for example 1 2.
.TP
\fB\fInum_primary_key_atts\fB\fR
The number of primary key fields.
.TP
\fB\fItgt_pk_att_vals_array\fB\fR
Values of the primary key fields to be used in the resulting
\fBDELETE\fR command. Each field is represented in text form.
.SH "RETURN VALUE"
.PP
Returns the requested SQL statement as text.
.SH "EXAMPLE"
.sp
.nf
 test=# select dblink_build_sql_delete('"MyFoo"', '1 2', 2, '{"1", "b"}');
            dblink_build_sql_delete
 ---------------------------------------------
  DELETE FROM "MyFoo" WHERE f1='1' AND f2='b'
 (1 row)
   
.sp
.fi
.SH NAME
dblink_build_sql_update \- builds an UPDATE statement using a local tuple, replacing    the primary key field values with alternative supplied values
.SH SYNOPSIS
.sp
.nf
    dblink_build_sql_update(text relname,
                            int2vector primary_key_attnums,
                            int2 num_primary_key_atts,
                            text[] src_pk_att_vals_array,
                            text[] tgt_pk_att_vals_array) returns text
   
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBdblink_build_sql_update\fR can be useful in doing selective
replication of a local table to a remote database. It selects a row
from the local table based on primary key, and then builds a SQL
\fBUPDATE\fR command that will duplicate that row, but with
the primary key values replaced by the values in the last argument.
(To make an exact copy of the row, just specify the same values for
the last two arguments.) The \fBUPDATE\fR command always assigns
all fields of the row \(em the main difference between this and
\fBdblink_build_sql_insert\fR is that it's assumed that
the target row already exists in the remote table.
.SH "ARGUMENTS"
.TP
\fB\fIrelname\fB\fR
Name of a local relation, for example foo or
myschema.mytab. Include double quotes if the
name is mixed-case or contains special characters, for
example "FooBar"; without quotes, the string
will be folded to lower case.
.TP
\fB\fIprimary_key_attnums\fB\fR
Attribute numbers (1-based) of the primary key fields,
for example 1 2.
.TP
\fB\fInum_primary_key_atts\fB\fR
The number of primary key fields.
.TP
\fB\fIsrc_pk_att_vals_array\fB\fR
Values of the primary key fields to be used to look up the
local tuple. Each field is represented in text form.
An error is thrown if there is no local row with these
primary key values.
.TP
\fB\fItgt_pk_att_vals_array\fB\fR
Values of the primary key fields to be placed in the resulting
\fBUPDATE\fR command. Each field is represented in text form.
.SH "RETURN VALUE"
.PP
Returns the requested SQL statement as text.
.SH "EXAMPLE"
.sp
.nf
 test=# select dblink_build_sql_update('foo', '1 2', 2, '{"1", "a"}', '{"1", "b"}');
                    dblink_build_sql_update
 -------------------------------------------------------------
  UPDATE foo SET f1='1',f2='b',f3='1' WHERE f1='1' AND f2='b'
 (1 row)
   
.sp
.fi
